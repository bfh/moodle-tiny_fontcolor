{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_bfhfontcolor plugin.\n *\n * @module      tiny_bfhfontcolor/commands\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {register$c, isArrayOf, isString, mapColors} from \"./colorswat\";\n\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const color_map = [\n        '000000', 'Black',\n        '808080', 'Gray',\n        'FFFFFF', 'White',\n        'FF0000', 'Red',\n        'FFFF00', 'Yellow',\n        '008000', 'Green',\n        '0000FF', 'Blue'\n    ];\n\n    const color_map_backcolor = [\n        '000000', 'Black',\n        '808080', 'Gray',\n        'FFFFFF', 'White',\n        '008000', 'Green',\n        '0000FF', 'Blue'\n    ];\n\n    return (editor) => {\n        editor.options.set('custom_colors', false);\n        editor.options.set('color_map', color_map);\n        editor.options.register('color_map_background', {\n            processor: value => {\n                if (isArrayOf(value, isString)) {\n                    return {\n                        value: mapColors(value),\n                        valid: true\n                    };\n                } else {\n                    return {\n                        valid: false,\n                        message: 'Must be an array of strings.'\n                    };\n                }\n            },\n            default: color_map_backcolor,\n        });\n\n        editor.options.set('color_map_background', color_map_backcolor);\n        register$c(editor);\n\n    };\n};\n"],"names":["async","color_map","color_map_backcolor","editor","options","set","register","processor","value","isString","valid","message","default"],"mappings":"gMAkCwBA,gBACdC,UAAY,CACd,SAAU,QACV,SAAU,OACV,SAAU,QACV,SAAU,MACV,SAAU,SACV,SAAU,QACV,SAAU,QAGRC,oBAAsB,CACxB,SAAU,QACV,SAAU,OACV,SAAU,QACV,SAAU,QACV,SAAU,eAGNC,SACJA,OAAOC,QAAQC,IAAI,iBAAiB,GACpCF,OAAOC,QAAQC,IAAI,YAAaJ,WAChCE,OAAOC,QAAQE,SAAS,uBAAwB,CAC5CC,UAAWC,QACH,wBAAUA,MAAOC,qBACV,CACHD,OAAO,wBAAUA,OACjBE,OAAO,GAGJ,CACHA,OAAO,EACPC,QAAS,gCAIrBC,QAASV,sBAGbC,OAAOC,QAAQC,IAAI,uBAAwBH,+CAChCC"}