{"version":3,"file":"colorswat.min.js","sources":["../src/colorswat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Color palette setter for Tiny Font Color plugin.\n * This code is mostly reused from the TinyMCE silver theme. However, this\n * code is enhanced to have two different color maps for background and\n * text color. Also, the option to enable or disable custom colors\n * via a colorpicker can be set independently on both text- and\n * background color. If the colorpicker is disabled and the color\n * map is empty for one of the text- or background color, the menu entry as\n * well as the toolbar button will not appear in the editor.\n *\n * @module      tiny_fontcolor\n * @copyright   2023 Luca Bösch <luca.boesch@bfh.ch>\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// ESLint directives.\n\nimport * as pf from './polyfill';\nimport {\n  getBackcolorMap,\n  getForecolorMap,\n  isBackcolorPickerOn,\n  isForecolorPickerOn,\n  useCssClasses,\n  getBackcolorClasses,\n  getForecolorClasses\n} from './options';\nimport {component as pluginname, forecolor, backcolor} from './common';\nimport {isHexString, isNullable} from \"./polyfill\";\n\nlet global$4 = localStorage;\n\nconst map$2 = (xs, f) => {\n  const len = xs.length;\n  const r = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const x = xs[i];\n    r[i] = f(x, i);\n  }\n  return r;\n};\n\nconst Label = () => {\n  let labels;\n  const register = txt => {\n    labels = txt;\n  };\n  const get = (name, ...args) => {\n    let val = !isNullable(labels[name]) ? labels[name] : name;\n    if (!isNullable(args)) {\n      for (let x = 0; x < args.length; x++) {\n        val = val.replace('{' + x + '}', args[x]);\n      }\n    }\n    return val;\n  };\n  return {\n    get,\n    register,\n  };\n};\n// eslint-disable-next-line\nconst labels = Label();\n\nconst Cell = initial => {\n  let value = initial;\n  const get = () => {\n    return value;\n  };\n  const set = v => {\n    value = v;\n  };\n  return {\n    get,\n    set\n  };\n};\n\nconst fireTextColorChange = (editor, data) => {\n  editor.dispatch('TextColorChange', data);\n};\n\nconst storageName = 'tinymce-custom-colors';\nconst ColorCache = (max = 10, suffix = '') => {\n  const storageString = global$4.getItem(storageName + suffix);\n  const localstorage = pf.isString(storageString) ? JSON.parse(storageString) : [];\n  const prune = list => {\n    const diff = max - list.length;\n    return diff < 0 ? list.slice(0, max) : list;\n  };\n  const cache = prune(localstorage);\n  const add = key => {\n    pf.indexOf(cache, key).each(remove);\n    cache.unshift(key);\n    if (cache.length > max) {\n      cache.pop();\n    }\n    global$4.setItem(storageName, JSON.stringify(cache));\n  };\n  const remove = idx => {\n    cache.splice(idx, 1);\n  };\n  const state = () => cache.slice(0);\n  return {\n    add,\n    state\n  };\n};\n\n// eslint-disable-next-line\nconst colorCache = ColorCache(10);\n// eslint-disable-next-line\nconst colorCacheBg = ColorCache(10, '-background');\n\nconst option$1 = name => editor => editor.options.get(name);\n\nconst getColorCols$1 = option$1('color_cols');\nconst getColors$3 = (editor, name) => {\n  if (name === forecolor) {\n    return getForecolorMap(editor);\n  }\n  return getBackcolorMap(editor);\n};\nconst getCurrentColors = (type) => map$2(type === forecolor ? colorCache.state() : colorCacheBg.state(), color => ({\n  type: 'choiceitem',\n  text: color,\n  value: color\n}));\nconst addColor = color => {\n  colorCache.add(color);\n};\n\nconst fallbackColor = '#000000';\nconst hasStyleApi = node => pf.isNonNullable(node.style);\nconst getCurrentColor = (editor, format) => {\n  let color;\n  editor.dom.getParents(editor.selection.getStart(), elm => {\n    const value = hasStyleApi(elm) ? elm.style[format === forecolor ? 'color' : 'backgroundColor'] : null;\n    if (value) {\n      color = color ? color : value;\n    }\n  });\n  return pf.Optional.from(color);\n};\nconst applyFormat = (editor, format, value) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.apply(format, {value});\n    editor.nodeChanged();\n  });\n};\nconst removeFormat = (editor, format) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.remove(format, {value: null}, undefined, true);\n    editor.nodeChanged();\n  });\n};\nconst registerLabels = txt => {\n    labels.register(txt);\n};\nconst registerCommands = editor => {\n  editor.addCommand('mceApplyTextcolor', (format, value) => {\n    applyFormat(editor, format, value);\n  });\n  editor.addCommand('mceRemoveTextcolor', format => {\n    removeFormat(editor, format);\n  });\n};\nconst handleColorChange = (editor, format, value) => {\n  if (useCssClasses(editor)) {\n    const cssClass = forecolor.includes(format)\n      ? getForecolorClasses(editor).find((v) => v[1] === value)[0]\n      : getBackcolorClasses(editor).find((v) => v[1] === value)[0];\n    if (cssClass) {\n      // Need to add either a span or check in the node for a classList.\n      const prefix = pluginname + (forecolor.includes(format) ? '-textcolors-' : '-backgroundcolors-');\n      const selContent = editor.selection.getContent({format: 'html'});\n      const el = editor.selection.getStart();\n      if (el.nodeType === document.ELEMENT_NODE && el.innerHTML.trim() === selContent.trim()) {\n        el.classList.forEach((cl) => {\n          if (cl.startsWith(prefix)) {\n            el.classList.remove(cl);\n          }\n        });\n        el.classList.add(cssClass);\n        /*\n        // ✅ Tell TinyMCE the content has changed\n        editor.undoManager.transact(() => {\n          editor.selection.select(el); // Optional: Reselect the new span\n          editor.nodeChanged();          // Triggers re-render and state update\n        });\n        */\n        return;\n      }\n      editor.selection.setContent(`<span class=\"${cssClass}\">${selContent}</span>`);\n      return;\n    }\n  }\n  editor.execCommand('mceApplyTextcolor', format, value);\n};\nconst handleColorRemove = (editor, format) => {\n  if (useCssClasses(editor)) {\n    const prefix = pluginname + (forecolor.includes(format) ? '-textcolors-' : '-backgroundcolors-');\n    const selContent = editor.selection.getContent({format: 'html'});\n    const el = editor.selection.getStart();\n    if (el.nodeType === document.ELEMENT_NODE && el.innerHTML.trim() === selContent.trim()) {\n      el.classList.forEach((cl) => {\n        if (cl.startsWith(prefix)) {\n          el.classList.remove(cl);\n        }\n      });\n    }\n  }\n  editor.execCommand('mceRemoveTextcolor', format);\n};\nconst getAdditionalColors = hasCustom => {\n  const type = 'choiceitem';\n  const remove = {\n    type,\n    text: labels.get('removeColor'),\n    icon: 'color-swatch-remove-color',\n    value: 'remove'\n  };\n  const custom = {\n    type,\n    text: labels.get('customColor'),\n    icon: 'color-picker',\n    value: 'custom'\n  };\n  return hasCustom ? [\n    remove,\n    custom\n  ] : [remove];\n};\nconst applyColor = (editor, format, value, onChoice) => {\n  if (value === 'custom') {\n    const dialog = colorPickerDialog(editor);\n    dialog(colorOpt => {\n      colorOpt.each(color => {\n        addColor(color);\n        handleColorChange(editor, format, color);\n        onChoice(color);\n      });\n    }, fallbackColor);\n  } else if (value === 'remove') {\n    onChoice('');\n    handleColorRemove(format);\n  } else {\n    onChoice(value);\n    handleColorChange(editor, format, value);\n  }\n};\nconst getColors$1 = (colors, hasCustom, type) => colors.concat(getCurrentColors(type).concat(getAdditionalColors(hasCustom)));\nconst getFetch$1 = (colors, hasCustom, type) => callback => {\n  callback(getColors$1(colors, hasCustom, type));\n};\nconst setIconColor = (splitButtonApi, name, newColor) => {\n  const id = name === forecolor ? 'tox-icon-text-color__color' : 'tox-icon-highlight-bg-color__color';\n  splitButtonApi.setIconFill(id, newColor);\n};\nconst registerTextColorButton = (editor, name, format, tooltip, lastColor) => {\n  let iconName, hasCustom;\n  if (name === forecolor) {\n    iconName = 'text-color';\n    hasCustom = isForecolorPickerOn(editor);\n  } else {\n    iconName = 'highlight-bg-color';\n    hasCustom = isBackcolorPickerOn(editor);\n  }\n  editor.ui.registry.addSplitButton(name, {\n    tooltip,\n    presets: 'color',\n    icon: iconName,\n    select: value => {\n      const optCurrentRgb = getCurrentColor(editor, format);\n      return optCurrentRgb.bind(currentRgb => pf.fromString(currentRgb).map(rgba => {\n        const currentHex = pf.fromRgba(rgba).value;\n        return pf.contains$1(value.toLowerCase(), currentHex);\n      })).getOr(false);\n    },\n    columns: getColorCols$1(editor),\n    fetch: getFetch$1(getColors$3(editor, name), hasCustom, name),\n    onAction: () => {\n      applyColor(editor, format, lastColor.get(), pf.noop);\n    },\n    onItemAction: (_splitButtonApi, value) => {\n      applyColor(editor, format, value, newColor => {\n        lastColor.set(newColor);\n        fireTextColorChange(editor, {\n          name,\n          color: newColor\n        });\n      });\n    },\n    onSetup: splitButtonApi => {\n      setIconColor(splitButtonApi, name, lastColor.get());\n      const handler = e => {\n        if (e.name === name) {\n          setIconColor(splitButtonApi, e.name, e.color);\n        }\n      };\n      editor.on('TextColorChange', handler);\n      return () => {\n        editor.off('TextColorChange', handler);\n      };\n    }\n  });\n};\nconst registerTextColorMenuItem = (editor, name, format, text) => {\n  editor.ui.registry.addNestedMenuItem(name, {\n    text,\n    icon: name === forecolor ? 'text-color' : 'highlight-bg-color',\n    getSubmenuItems: () => [{\n      type: 'fancymenuitem',\n      fancytype: 'colorswatch',\n      initData: {\n        allowCustomColors: name === forecolor ? isForecolorPickerOn(editor) : isBackcolorPickerOn(editor),\n        colors: getColors$3(editor, name),\n      },\n      onAction: data => {\n        applyColor(editor, format, data.value, pf.noop);\n      }\n    }]\n  });\n};\nconst colorPickerDialog = editor => (callback, value) => {\n  const onSubmit = api => {\n    const data = api.getData();\n    const hex = data.colorpicker;\n    const err = document.querySelector('.dlg-color-picker-error');\n    let isValid = true;\n    err.parentNode.parentNode.querySelectorAll('input').forEach((i, x) => {\n      if (x < 3) {\n        const m = ['R', 'G', 'B'];\n        const r = parseInt(i.value);\n        if (!i.value.match(/^\\d{1,3}$/) || r < 0 || r > 255) {\n          err.innerHTML = labels.get('colorPickerErrRgbCode', m[x] + ' = ' + i.value);\n          i.focus();\n          isValid = false;\n        }\n      } else if (!isHexString('#' + i.value)) {\n        err.innerHTML = labels.get('colorPickerErrHexCode', hex);\n        i.focus();\n        isValid = false;\n      }\n    });\n    if (isValid) {\n      callback(pf.Optional.from(hex));\n      api.close();\n    } else {\n      err.classList.remove('hidden');\n      err.classList.add('alert');\n    }\n  };\n  const initialData = {colorpicker: value};\n  editor.windowManager.open({\n    title: labels.get('colorPickerTitle'),\n    size: 'normal',\n    body: {\n      type: 'panel',\n      items: [{\n        type: 'htmlpanel',\n        html: '<span class=\"dlg-color-picker-error hidden\"></span>',\n      }, {\n        type: 'colorpicker',\n        name: 'colorpicker',\n        label: labels.get('colorPickerColor'),\n      }]\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: labels.get('colorPickerCancel'),\n      },\n      {\n        type: 'submit',\n        name: 'save',\n        text: labels.get('colorPickerSave'),\n        primary: true\n      }\n    ],\n    initialData,\n    onSubmit,\n    onClose: pf.noop,\n    onCancel: () => {\n      callback(pf.Optional.none());\n    }\n  });\n};\nconst register$c = (editor, txt) => {\n  if (!isForecolorPickerOn(editor) && !isBackcolorPickerOn(editor)\n    && getForecolorMap(editor).length === 0 && getBackcolorMap(editor).length === 0) {\n    return;\n  }\n  registerLabels(txt);\n  registerCommands(editor);\n  if (isForecolorPickerOn(editor) || getForecolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastForeColor = Cell(fallbackColor);\n    registerTextColorButton(editor, forecolor, 'forecolor', labels.get('btnFgColor'), lastForeColor);\n    registerTextColorMenuItem(editor, forecolor, 'forecolor', labels.get('menuItemFgcolor'));\n  }\n  if (isBackcolorPickerOn(editor) || getBackcolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastBackColor = Cell(fallbackColor);\n    registerTextColorButton(editor, backcolor, 'hilitecolor', labels.get('btnBgcolor'), lastBackColor);\n    registerTextColorMenuItem(editor, backcolor, 'hilitecolor', labels.get('menuItemBgcolor'));\n  }\n\n  // The css clases are is theme_<name>/scss are not present in the editor.\n  // Therefore, we must add manually our css classes for the color management.\n  if (useCssClasses(editor)) {\n    editor.on('SkinLoaded', () => {\n      const contentStyles = [];\n      getBackcolorClasses(editor).forEach((e) => {\n        contentStyles.push(`.${e[0]}:{background-color:${e[1]}}`);\n      });\n      getForecolorClasses(editor).forEach((e) => {\n        contentStyles.push(`.${e[0]}:{color: ${e[1]}}`);\n      });\n      // Eigther append the css to the already existing, or create a new style element\n      // editor.dom.select('#mceDefaultStyles')[0].innerHTML += contentStyles.join(' ');\n      const style = document.createElement('style');\n      style.innerHTML = contentStyles.join(' ');\n      editor.dom.select('#mceDefaultStyles')[0].parentNode.appendChild(style);\n      // That didn't work neither:\n      // editor.contentStyles.push(contentStyles.join(' '));\n    });\n  }\n};\n\nexport {\n  register$c,\n};\n"],"names":["global$4","localStorage","labels","get","name","val","args","x","length","replace","register","txt","Label","Cell","initial","value","set","v","storageName","ColorCache","max","suffix","storageString","getItem","localstorage","pf","isString","JSON","parse","prune","list","slice","cache","add","key","indexOf","each","remove","unshift","pop","setItem","stringify","idx","splice","state","colorCache","colorCacheBg","getColorCols$1","editor","options","getColors$3","forecolor","getCurrentColors","type","xs","f","len","r","Array","i","map$2","color","text","getCurrentColor","format","dom","getParents","selection","getStart","elm","node","isNonNullable","style","Optional","from","handleColorChange","cssClass","includes","find","prefix","pluginname","selContent","getContent","el","nodeType","document","ELEMENT_NODE","innerHTML","trim","classList","forEach","cl","startsWith","setContent","execCommand","applyColor","onChoice","colorPickerDialog","dialog","colorOpt","addColor","handleColorRemove","getColors$1","colors","hasCustom","concat","icon","custom","getAdditionalColors","getFetch$1","callback","setIconColor","splitButtonApi","newColor","id","setIconFill","registerTextColorButton","tooltip","lastColor","iconName","ui","registry","addSplitButton","presets","select","bind","currentRgb","fromString","map","rgba","currentHex","fromRgba","contains$1","toLowerCase","getOr","columns","fetch","onAction","noop","onItemAction","_splitButtonApi","data","dispatch","fireTextColorChange","onSetup","handler","e","on","off","registerTextColorMenuItem","addNestedMenuItem","getSubmenuItems","fancytype","initData","allowCustomColors","initialData","colorpicker","windowManager","open","title","size","body","items","html","label","buttons","primary","onSubmit","api","hex","getData","err","querySelector","isValid","parentNode","querySelectorAll","m","parseInt","match","focus","close","onClose","onCancel","none","registerLabels","addCommand","undoManager","transact","formatter","apply","nodeChanged","applyFormat","undefined","removeFormat","registerCommands","lastForeColor","lastBackColor","backcolor","contentStyles","push","createElement","join","appendChild"],"mappings":"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"}