{"version":3,"file":"colorswat.min.js","sources":["../src/colorswat.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Color palette setter for BFH Fontcolor plugin.\n * This code is mostly reused from the TinyMCE silver theme. However, this\n * code is enhanced to have two different color maps for background and\n * text color. Also, the option to enable or disable custom colors\n * via a colorpicker can be set independently on both text- and\n * background color. If the colorpicker is disabled and the color\n * map is empty for one of the text- or background color, the menu entry as\n * well as the toolbar button will not appear in the editor.\n *\n * @module      tiny_bfhfontcolor\n * @copyright   2023 Luca BÃ¶sch <luca.boesch@bfh.ch>\n * @copyright   2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// ESLint directives.\n\nimport * as pf from './polyfill';\nimport {getBackcolorMap, getForecolorMap, isBackcolorPickerOn, isForecolorPickerOn} from './options';\n\nlet global$4 = localStorage;\n\nconst map$2 = (xs, f) => {\n  const len = xs.length;\n  const r = new Array(len);\n  for (let i = 0; i < len; i++) {\n    const x = xs[i];\n    r[i] = f(x, i);\n  }\n  return r;\n};\n\nconst Cell = initial => {\n  let value = initial;\n  const get = () => {\n    return value;\n  };\n  const set = v => {\n    value = v;\n  };\n  return {\n    get,\n    set\n  };\n};\n\nconst fireTextColorChange = (editor, data) => {\n  editor.dispatch('TextColorChange', data);\n};\n\nconst storageName = 'tinymce-custom-colors';\nconst ColorCache = (max = 10, suffix = '') => {\n  const storageString = global$4.getItem(storageName + suffix);\n  const localstorage = pf.isString(storageString) ? JSON.parse(storageString) : [];\n  const prune = list => {\n    const diff = max - list.length;\n    return diff < 0 ? list.slice(0, max) : list;\n  };\n  const cache = prune(localstorage);\n  const add = key => {\n    pf.indexOf(cache, key).each(remove);\n    cache.unshift(key);\n    if (cache.length > max) {\n      cache.pop();\n    }\n    global$4.setItem(storageName, JSON.stringify(cache));\n  };\n  const remove = idx => {\n    cache.splice(idx, 1);\n  };\n  const state = () => cache.slice(0);\n  return {\n    add,\n    state\n  };\n};\n\n// eslint-disable-next-line\nconst colorCache = ColorCache(10);\n// eslint-disable-next-line\nconst colorCacheBg = ColorCache(10, '-background');\n\nconst option$1 = name => editor => editor.options.get(name);\n\nconst getColorCols$1 = option$1('color_cols');\nconst getColors$3 = (editor, name) => {\n  if (name === 'bfh_forecolor') {\n    return getForecolorMap(editor);\n  }\n  return getBackcolorMap(editor);\n};\nconst getCurrentColors = (type) => map$2(type === 'bfh_forecolor' ? colorCache.state() : colorCacheBg.state(), color => ({\n  type: 'choiceitem',\n  text: color,\n  value: color\n}));\nconst addColor = color => {\n  colorCache.add(color);\n};\n\nconst fallbackColor = '#000000';\nconst hasStyleApi = node => pf.isNonNullable(node.style);\nconst getCurrentColor = (editor, format) => {\n  let color;\n  editor.dom.getParents(editor.selection.getStart(), elm => {\n    const value = hasStyleApi(elm) ? elm.style[format === 'bfh_forecolor' ? 'color' : 'backgroundColor'] : null;\n    if (value) {\n      color = color ? color : value;\n    }\n  });\n  return pf.Optional.from(color);\n};\nconst applyFormat = (editor, format, value) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.apply(format, {value});\n    editor.nodeChanged();\n  });\n};\nconst removeFormat = (editor, format) => {\n  editor.undoManager.transact(() => {\n    editor.focus();\n    editor.formatter.remove(format, {value: null}, undefined, true);\n    editor.nodeChanged();\n  });\n};\nconst registerCommands = editor => {\n  editor.addCommand('mceApplyTextcolor', (format, value) => {\n    applyFormat(editor, format, value);\n  });\n  editor.addCommand('mceRemoveTextcolor', format => {\n    removeFormat(editor, format);\n  });\n};\nconst getAdditionalColors = hasCustom => {\n  const type = 'choiceitem';\n  const remove = {\n    type,\n    text: 'Remove color',\n    icon: 'color-swatch-remove-color',\n    value: 'remove'\n  };\n  const custom = {\n    type,\n    text: 'Custom color',\n    icon: 'color-picker',\n    value: 'custom'\n  };\n  return hasCustom ? [\n    remove,\n    custom\n  ] : [remove];\n};\nconst applyColor = (editor, format, value, onChoice) => {\n  if (value === 'custom') {\n    const dialog = colorPickerDialog(editor);\n    dialog(colorOpt => {\n      colorOpt.each(color => {\n        addColor(color);\n        editor.execCommand('mceApplyTextcolor', format, color);\n        onChoice(color);\n      });\n    }, fallbackColor);\n  } else if (value === 'remove') {\n    onChoice('');\n    editor.execCommand('mceRemoveTextcolor', format);\n  } else {\n    onChoice(value);\n    editor.execCommand('mceApplyTextcolor', format, value);\n  }\n};\nconst getColors$1 = (colors, hasCustom, type) => colors.concat(getCurrentColors(type).concat(getAdditionalColors(hasCustom)));\nconst getFetch$1 = (colors, hasCustom, type) => callback => {\n  callback(getColors$1(colors, hasCustom, type));\n};\nconst setIconColor = (splitButtonApi, name, newColor) => {\n  const id = name === 'bfh_forecolor' ? 'tox-icon-text-color__color' : 'tox-icon-highlight-bg-color__color';\n  splitButtonApi.setIconFill(id, newColor);\n};\nconst registerTextColorButton = (editor, name, format, tooltip, lastColor) => {\n  let iconName, hasCustom;\n  if (name === 'bfh_forecolor') {\n    iconName = 'text-color';\n    hasCustom = isForecolorPickerOn(editor);\n  } else {\n    iconName = 'highlight-bg-color';\n    hasCustom = isBackcolorPickerOn(editor);\n  }\n  editor.ui.registry.addSplitButton(name, {\n    tooltip,\n    presets: 'color',\n    icon: iconName,\n    select: value => {\n      const optCurrentRgb = getCurrentColor(editor, format);\n      return optCurrentRgb.bind(currentRgb => pf.fromString(currentRgb).map(rgba => {\n        const currentHex = pf.fromRgba(rgba).value;\n        return pf.contains$1(value.toLowerCase(), currentHex);\n      })).getOr(false);\n    },\n    columns: getColorCols$1(editor),\n    fetch: getFetch$1(getColors$3(editor, name), hasCustom, name),\n    onAction: () => {\n      applyColor(editor, format, lastColor.get(), pf.noop);\n    },\n    onItemAction: (_splitButtonApi, value) => {\n      applyColor(editor, format, value, newColor => {\n        lastColor.set(newColor);\n        fireTextColorChange(editor, {\n          name,\n          color: newColor\n        });\n      });\n    },\n    onSetup: splitButtonApi => {\n      setIconColor(splitButtonApi, name, lastColor.get());\n      const handler = e => {\n        if (e.name === name) {\n          setIconColor(splitButtonApi, e.name, e.color);\n        }\n      };\n      editor.on('TextColorChange', handler);\n      return () => {\n        editor.off('TextColorChange', handler);\n      };\n    }\n  });\n};\nconst registerTextColorMenuItem = (editor, name, format, text) => {\n  editor.ui.registry.addNestedMenuItem(name, {\n    text,\n    icon: name === 'bfh_forecolor' ? 'text-color' : 'highlight-bg-color',\n    getSubmenuItems: () => [{\n      type: 'fancymenuitem',\n      fancytype: 'colorswatch',\n      initData: {\n        allowCustomColors: name === 'bfh_forecolor' ? isForecolorPickerOn(editor) : isBackcolorPickerOn(editor),\n        colors: getColors$3(editor, name),\n      },\n      onAction: data => {\n        applyColor(editor, format, data.value, pf.noop);\n      }\n    }]\n  });\n};\nconst colorPickerDialog = editor => (callback, value) => {\n  let isValid = false;\n  const onSubmit = api => {\n    const data = api.getData();\n    const hex = data.colorpicker;\n    if (isValid) {\n      callback(pf.Optional.from(hex));\n      api.close();\n    } else {\n      editor.windowManager.alert(editor.translate([\n        'Invalid hex color code: {0}',\n        hex\n      ]));\n    }\n  };\n  const onAction = (_api, details) => {\n    if (details.name === 'hex-valid') {\n      isValid = details.value;\n    }\n  };\n  const initialData = {colorpicker: value};\n  editor.windowManager.open({\n    title: 'Color Picker',\n    size: 'normal',\n    body: {\n      type: 'panel',\n      items: [{\n        type: 'colorpicker',\n        name: 'colorpicker',\n        label: 'Color'\n      }]\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: 'Cancel'\n      },\n      {\n        type: 'submit',\n        name: 'save',\n        text: 'Save',\n        primary: true\n      }\n    ],\n    initialData,\n    onAction,\n    onSubmit,\n    onClose: pf.noop,\n    onCancel: () => {\n      callback(pf.Optional.none());\n    }\n  });\n};\nconst register$c = (editor, labels) => {\n  if (!isForecolorPickerOn(editor) && !isBackcolorPickerOn(editor)\n    && getForecolorMap(editor).length === 0 && getBackcolorMap(editor).length === 0) {\n    return;\n  }\n  registerCommands(editor);\n  if (isForecolorPickerOn(editor) || getForecolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastForeColor = Cell(fallbackColor);\n    registerTextColorButton(editor, 'bfh_forecolor', 'forecolor', labels.btnFgColor, lastForeColor);\n    registerTextColorMenuItem(editor, 'bfh_forecolor', 'forecolor', labels.menuItemFgcolor);\n  }\n  if (isBackcolorPickerOn(editor) || getBackcolorMap(editor).length > 0) {\n    // eslint-disable-next-line\n    const lastBackColor = Cell(fallbackColor);\n    registerTextColorButton(editor, 'bfh_backcolor', 'hilitecolor', labels.btnBgcolor, lastBackColor);\n    registerTextColorMenuItem(editor, 'bfh_backcolor', 'hilitecolor', labels.menuItemBgcolor);\n  }\n};\n\nexport {\n  register$c\n};"],"names":["global$4","localStorage","Cell","initial","value","get","set","v","storageName","ColorCache","max","suffix","storageString","getItem","localstorage","pf","isString","JSON","parse","prune","list","length","slice","cache","add","key","indexOf","each","remove","unshift","pop","setItem","stringify","idx","splice","state","colorCache","colorCacheBg","getColorCols$1","name","editor","options","getColors$3","getCurrentColors","type","xs","f","len","r","Array","i","x","map$2","color","text","getCurrentColor","format","dom","getParents","selection","getStart","elm","node","isNonNullable","style","Optional","from","applyColor","onChoice","colorPickerDialog","dialog","colorOpt","addColor","execCommand","getFetch$1","colors","hasCustom","callback","concat","icon","getAdditionalColors","getColors$1","setIconColor","splitButtonApi","newColor","id","setIconFill","registerTextColorButton","tooltip","lastColor","iconName","ui","registry","addSplitButton","presets","select","bind","currentRgb","fromString","map","rgba","currentHex","fromRgba","contains$1","toLowerCase","getOr","columns","fetch","onAction","noop","onItemAction","_splitButtonApi","data","dispatch","fireTextColorChange","onSetup","handler","e","on","off","registerTextColorMenuItem","addNestedMenuItem","getSubmenuItems","fancytype","initData","allowCustomColors","isValid","initialData","colorpicker","windowManager","open","title","size","body","items","label","buttons","primary","_api","details","onSubmit","api","hex","getData","close","alert","translate","onClose","onCancel","none","labels","addCommand","undoManager","transact","focus","formatter","apply","nodeChanged","applyFormat","undefined","removeFormat","registerCommands","lastForeColor","btnFgColor","menuItemFgcolor","lastBackColor","btnBgcolor","menuItemBgcolor"],"mappings":"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"}