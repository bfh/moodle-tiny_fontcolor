define("tiny_bfhfontcolor/colorswat",["exports","./options"],(function(_exports,_options){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.registerTextColorButton=_exports.register$c=_exports.mapColors=_exports.isString=_exports.isArrayOf=void 0;const isType$1=type=>value=>(x=>{const t=typeof x;return null===x?"null":"object"===t&&Array.isArray(x)?"array":"object"===t&&(o=v=x,proto=(constructor=String).prototype,proto.isPrototypeOf(o)||(null===(_v$constructor=v.constructor)||void 0===_v$constructor?void 0:_v$constructor.name)===constructor.name)?"string":t;var o,proto;var v,constructor,_v$constructor})(value)===type,isString=isType$1("string");_exports.isString=isString;const isArray=isType$1("array"),isUndefined=(t=void 0,a=>t===a);var t;const isNonNullable=a=>!(a=>null==a)(a);_exports.isArrayOf=(value,pred)=>{if(isArray(value)){for(let i=0,len=value.length;i<len;++i)if(!pred(value[i]))return!1;return!0}return!1};const nativeIndexOf=Array.prototype.indexOf,indexOf=(xs,x)=>{const r=((ts,t)=>nativeIndexOf.call(ts,t))(xs,x);return-1===r?Optional.none():Optional.some(r)},noop=()=>{};class Optional{constructor(tag,value){this.tag=tag,this.value=value}static some(value){return new Optional(!0,value)}static none(){return Optional.singletonNone}fold(onNone,onSome){return this.tag?onSome(this.value):onNone()}isSome(){return this.tag}isNone(){return!this.tag}map(mapper){return this.tag?Optional.some(mapper(this.value)):Optional.none()}bind(binder){return this.tag?binder(this.value):Optional.none()}exists(predicate){return this.tag&&predicate(this.value)}forall(predicate){return!this.tag||predicate(this.value)}filter(predicate){return!this.tag||predicate(this.value)?this:Optional.none()}getOr(replacement){return this.tag?this.value:replacement}or(replacement){return this.tag?this:replacement}getOrThunk(thunk){return this.tag?this.value:thunk()}orThunk(thunk){return this.tag?this:thunk()}getOrDie(message){if(this.tag)return this.value;throw new Error(null!=message?message:"Called getOrDie on None")}static from(value){return isNonNullable(value)?Optional.some(value):Optional.none()}getOrNull(){return this.tag?this.value:null}getOrUndefined(){return this.value}each(worker){this.tag&&worker(this.value)}toArray(){return this.tag?[this.value]:[]}toString(){return this.tag?"some(".concat(this.value,")"):"none()"}}Optional.singletonNone=new Optional(!1);const toHex=component=>{const hex=component.toString(16);return(1===hex.length?"0"+hex:hex).toUpperCase()},fromRgba=rgbaColour=>{const value=toHex(rgbaColour.red)+toHex(rgbaColour.green)+toHex(rgbaColour.blue);return hexColour(value)},rgbRegex=/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i,rgbaRegex=/^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?(?:\.\d+)?)\s*\)\s*$/i,fromStringValues=(red,green,blue,alpha)=>{const r=parseInt(red,10),g=parseInt(green,10),b=parseInt(blue,10),a=parseFloat(alpha);return rgbaColour(r,g,b,a)},fromString=rgbaString=>{if("transparent"===rgbaString)return Optional.some(rgbaColour(0,0,0,0));const rgbMatch=rgbRegex.exec(rgbaString);if(null!==rgbMatch)return Optional.some(fromStringValues(rgbMatch[1],rgbMatch[2],rgbMatch[3],"1"));const rgbaMatch=rgbaRegex.exec(rgbaString);return null!==rgbaMatch?Optional.some(fromStringValues(rgbaMatch[1],rgbaMatch[2],rgbaMatch[3],rgbaMatch[4])):Optional.none()},hexColour=value=>({value:value}),shorthandRegex=/^#?([a-f\d])([a-f\d])([a-f\d])$/i,longformRegex=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,normalizeHex=hex=>{return(str=hex,prefix="#",startsWith(str,prefix)?((str,numChars)=>str.substring(numChars))(str,prefix.length):str).toUpperCase();var str,prefix},fromString$1=hex=>(hex=>shorthandRegex.test(hex)||longformRegex.test(hex))(hex)?Optional.some({value:normalizeHex(hex)}):Optional.none(),startsWith=(str,prefix)=>((str,substr,start)=>""===substr||str.length>=substr.length&&str.substr(start,start+substr.length)===substr)(str,prefix,0),anyToHex=color=>fromString$1(color).orThunk((()=>fromString(color).map(fromRgba))).getOrThunk((()=>{const canvas=document.createElement("canvas");canvas.height=1,canvas.width=1;const canvasContext=canvas.getContext("2d");canvasContext.clearRect(0,0,canvas.width,canvas.height),canvasContext.fillStyle="#FFFFFF",canvasContext.fillStyle=color,canvasContext.fillRect(0,0,1,1);const rgba=canvasContext.getImageData(0,0,1,1).data,r=rgba[0],g=rgba[1],b=rgba[2],a=rgba[3];return fromRgba(rgbaColour(r,g,b,a))})),rgbaColour=(red,green,blue,alpha)=>({red:red,green:green,blue:blue,alpha:alpha});let global$4=window.tinymce.util.Tools.resolve("tinymce.util.LocalStorage");const Cell=initial=>{let value=initial;return{get:()=>value,set:v=>{value=v}}},storageName="tinymce-custom-colors",ColorCache=function(){let max=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,suffix=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const storageString=global$4.getItem(storageName+suffix),localstorage=isString(storageString)?JSON.parse(storageString):[],prune=list=>max-list.length<0?list.slice(0,max):list,cache=prune(localstorage),add=key=>{indexOf(cache,key).each(remove),cache.unshift(key),cache.length>max&&cache.pop(),global$4.setItem(storageName,JSON.stringify(cache))},remove=idx=>{cache.splice(idx,1)},state=()=>cache.slice(0);return{add:add,state:state}},colorCache=ColorCache(10),colorCacheBg=ColorCache(10,"-background");_exports.mapColors=colorMap=>{const colors=[];for(let i=0;i<colorMap.length;i+=2)colors.push({text:colorMap[i+1],value:"#"+anyToHex(colorMap[i]).value,type:"choiceitem"});return colors};const getColorCols$1=(name="color_cols",editor=>editor.options.get(name));var name;const getColors$3=(editor,name)=>"bfh_forecolor"===name?(0,_options.getForecolorMap)(editor):(0,_options.getBackcolorMap)(editor),getCurrentColors=type=>((xs,f)=>{const len=xs.length,r=new Array(len);for(let i=0;i<len;i++){const x=xs[i];r[i]=f(x,i)}return r})("bfh_forecolor"===type?colorCache.state():colorCacheBg.state(),(color=>({type:"choiceitem",text:color,value:color}))),getCurrentColor=(editor,format)=>{let color;return editor.dom.getParents(editor.selection.getStart(),(elm=>{const value=isNonNullable(elm.style)?elm.style["bfh_forecolor"===format?"color":"backgroundColor"]:null;value&&(color=color||value)})),Optional.from(color)},applyColor=(editor,format,value,onChoice)=>{if("custom"===value){colorPickerDialog(editor)((colorOpt=>{colorOpt.each((color=>{(color=>{colorCache.add(color)})(color),editor.execCommand("mceApplyTextcolor",format,color),onChoice(color)}))}),"#000000")}else"remove"===value?(onChoice(""),editor.execCommand("mceRemoveTextcolor",format)):(onChoice(value),editor.execCommand("mceApplyTextcolor",format,value))},getFetch$1=(colors,hasCustom,type)=>callback=>{callback(((colors,hasCustom,type)=>colors.concat(getCurrentColors(type).concat((hasCustom=>{const remove={type:"choiceitem",text:"Remove color",icon:"color-swatch-remove-color",value:"remove"};return hasCustom?[remove,{type:"choiceitem",text:"Custom color",icon:"color-picker",value:"custom"}]:[remove]})(hasCustom))))(colors,hasCustom,type))},setIconColor=(splitButtonApi,name,newColor)=>{const id="bfh_forecolor"===name?"tox-icon-text-color__color":"tox-icon-highlight-bg-color__color";splitButtonApi.setIconFill(id,newColor)},registerTextColorButton=(editor,name,format,tooltip,lastColor)=>{let iconName,hasCustom;"bfh_forecolor"===name?(iconName="text-color",hasCustom=(0,_options.isForecolorPickerOn)(editor)):(iconName="highlight-bg-color",hasCustom=(0,_options.isBackcolorPickerOn)(editor)),editor.ui.registry.addSplitButton(name,{tooltip:tooltip,presets:"color",icon:iconName,select:value=>getCurrentColor(editor,format).bind((currentRgb=>fromString(currentRgb).map((rgba=>{const currentHex=fromRgba(rgba).value;return function(str,substr){let start=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,end=arguments.length>3?arguments[3]:void 0;const idx=str.indexOf(substr,start);return-1!==idx&&(!!isUndefined(end)||idx+substr.length<=end)}(value.toLowerCase(),currentHex)})))).getOr(!1),columns:getColorCols$1(editor),fetch:getFetch$1(getColors$3(editor,name),hasCustom,name),onAction:()=>{applyColor(editor,format,lastColor.get(),noop)},onItemAction:(_splitButtonApi,value)=>{applyColor(editor,format,value,(newColor=>{lastColor.set(newColor),((editor,data)=>{editor.dispatch("TextColorChange",data)})(editor,{name:name,color:newColor})}))},onSetup:splitButtonApi=>{setIconColor(splitButtonApi,name,lastColor.get());const handler=e=>{e.name===name&&setIconColor(splitButtonApi,e.name,e.color)};return editor.on("TextColorChange",handler),()=>{editor.off("TextColorChange",handler)}}})};_exports.registerTextColorButton=registerTextColorButton;const registerTextColorMenuItem=(editor,name,format,text)=>{editor.ui.registry.addNestedMenuItem(name,{text:text,icon:"bfh_forecolor"===name?"text-color":"highlight-bg-color",getSubmenuItems:()=>[{type:"fancymenuitem",fancytype:"colorswatch",initData:{allowCustomColors:"bfh_forecolor"===name?(0,_options.isForecolorPickerOn)(editor):(0,_options.isBackcolorPickerOn)(editor),colors:getColors$3(editor,name)},onAction:data=>{applyColor(editor,format,data.value,noop)}}]})},colorPickerDialog=editor=>(callback,value)=>{let isValid=!1;const initialData={colorpicker:value};editor.windowManager.open({title:"Color Picker",size:"normal",body:{type:"panel",items:[{type:"colorpicker",name:"colorpicker",label:"Color"}]},buttons:[{type:"cancel",name:"cancel",text:"Cancel"},{type:"submit",name:"save",text:"Save",primary:!0}],initialData:initialData,onAction:(_api,details)=>{"hex-valid"===details.name&&(isValid=details.value)},onSubmit:api=>{const hex=api.getData().colorpicker;isValid?(callback(Optional.from(hex)),api.close()):editor.windowManager.alert(editor.translate(["Invalid hex color code: {0}",hex]))},onClose:noop,onCancel:()=>{callback(Optional.none())}})};_exports.register$c=editor=>{if((0,_options.isForecolorPickerOn)(editor)||(0,_options.isBackcolorPickerOn)(editor)||0!==(0,_options.getForecolorMap)(editor).length||0!==(0,_options.getBackcolorMap)(editor).length){if((editor=>{editor.addCommand("mceApplyTextcolor",((format,value)=>{((editor,format,value)=>{editor.undoManager.transact((()=>{editor.focus(),editor.formatter.apply(format,{value:value}),editor.nodeChanged()}))})(editor,format,value)})),editor.addCommand("mceRemoveTextcolor",(format=>{((editor,format)=>{editor.undoManager.transact((()=>{editor.focus(),editor.formatter.remove(format,{value:null},void 0,!0),editor.nodeChanged()}))})(editor,format)}))})(editor),(0,_options.isForecolorPickerOn)(editor)||(0,_options.getForecolorMap)(editor).length>0){const lastForeColor=Cell("#000000");registerTextColorButton(editor,"bfh_forecolor","forecolor","Text color",lastForeColor),registerTextColorMenuItem(editor,"bfh_forecolor","forecolor","Text color")}if((0,_options.isBackcolorPickerOn)(editor)||(0,_options.getBackcolorMap)(editor).length>0){const lastBackColor=Cell("#000000");registerTextColorButton(editor,"bfh_backcolor","hilitecolor","Background color",lastBackColor),registerTextColorMenuItem(editor,"bfh_backcolor","hilitecolor","Background color")}}}}));

//# sourceMappingURL=colorswat.min.js.map